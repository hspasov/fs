Настоящата имплементация поддържа всички операции в заданието, без lnsoft.


1. Структура на файловата система:

Както е по условие, е разделена на 512-байтови блокове. Първият блок е superblock. В него са записани в следния ред:
- символ за означение на главната директория - стойност '+', заема 1 байт
- символ за разделение между директориите в пълните пътища на файловете - стойност '/', заема 1 байт
- размер на блок - стойност 512, заема sizeof(size_t) байта
- в кой блок се намира superblock - стойност 0, заема sizeof(size_t) байта
- от кой блок започва bitmap-а за означение на свободните блокове за данни - стойност 1, заема sizeof(size_t) байта
- колко на брой блокове заема bitmap-а за означение на свободните блокове за данни - заема sizeof(size_t) байта, стойността зависи от размера на файла, върху който е създадена файловата система
- колко на брой са блоковете за данни - заема sizeof(size_t) байта, стойността отново зависи от размера на файловата система
- общ брой блокове - заема sizeof(size_t) байта, стойността е равна на (размера на файловата система / 512). (Общият брой блокове) = (брой блокове за данни + брой блокове за bitmap + 1 блок за superblock-а)
- от кой блок започват блоковете за данни - заема sizeof(size_t) байта, стойността е равна на (1 + брой блокове за bitmap)
- в кой блок за данни се намира inode-а за root директорията - стойността е 0, размерът е sizeof(size_t)

Останалите байтове до края на superblock-а остават със стойност 0.

След superblock следват определен брой блокове за bitmap на свободните блокове за данни. Стойността на n-тия бит съответства на състоянието на n-тия блок за данни. Стойност 0 означава свободен блок, а стойност 1 - зает блок.

След блоковете за bitmap на свободните блокове за данни следват самите блокове за данни.

1.1. Как се изчислява колко да са блоковоте за данни и колко блока да заема bitmap-а:
В кода във calc_free_block_bitmap_size се вижда следната формула, която използва "магически" числа, които всъщност са следствие от извеждане, което направих. Това е формулата:

(общ брой блокове) = (размер на файла, върху който да се създаде файловата система / 512)
(брой блокове за bitmap) = ((общ брой блокове + 4095) / 4097)
(брой блокове за данни) = (общ брой блокове - брой блокове за bitmap)

А това е извеждането. В него, използвайки операцията "/" ще имам предвид целочислено делене:

Нека y е общият брой блокове 
x - брой блокове за bitmap
z - брой блокове за данни

y ни е дадено, x и z не ги знаем.

Знаем, че y = 1 + x + z
(по-горе обясних структурата, как първият блок е superblock и т.н.)

Също така знаем, че x = 1 + (z / 4096)
Тук z делим на 4096, защото в един bitmap блок, който е 512 байта, може да се запишат състоянията на 4096 блокове за данни (4096 = 512 * 8)
Добавянето на 1 е заради целочисленото деление, тоест за да имаме един блок, в който да запишем състоянията на остатъка от блоковете за данни, след направеното целочислено деление.

Следва извеждане:
z / 4096 = x - 1
z = (x - 1) * 4096

y = 1 + x + (x - 1) * 4096
y = 4097 * x - 4095
x = (y + 4095) / 4097
което отразява (брой блокове за bitmap) = ((общ брой блокове + 4095) / 4097)

Получаваме x и след това решаваме z = y - x - 1

1.2. Съдържание на блоковете за данни - във всеки блок за данни може да е записано или съдържанието на inode, или адреси на блокове, или съдържанието на директория, или произволни байтове, които са съдържание на някакъв обикновен файл

1.2.1. Съдържание на inode - в следния ред се записва:
- размер на файла в байтове. Заема sizeof(size_t) байта.
- тип на файла. Заема 1 байт. Стойността може да е 'd' за директория, '-' за обикновен файл, или 'l' за soft link (каквито обаче не се поддържат)
- uid - id на owner-а на файла. Заема sizeof(uid_t) байта
- gid - id на групата на файла. Заема sizeof(gid_t) байта
- права на файла. Заема sizeof(mode_t) байта.
- timestamp на последна промяна на файла. Заема sizeof(time_t) байта.
- брой hardlinks. Заема sizeof(size_t) байта
- 13 direct blocks - номера на блокове за данни. Всеки номер заема sizeof(size_t)
- single indirect block - номер на блок, който в себе си съдържа (512 / sizeof(size_t)) броя номера на блокове за данни. Самият номер на single indirect block заема sizeof(size_t) байта
- double indirect block - номер на блок, който в себе си съдържа (512 / sizeof(size_t)) броя single indirect blocks. Самият номер на double indirect block заема sizeof(size_t) байта
- triple indirect block - номер на блок, който в себе си съдържа (512 / sizeof(size_t)) броя double indirect blocks. Самият номер на triple indirect block заема sizeof(size_t) байта

Останалите байтове до края на inode блока са 0.


1.2.2. Блок, който съдържа адреси на блокове - адресите са записани плътно един до друг. Всеки адрес заема sizeof(size_t). Разграничават се чрез offset-а от началото на блока, който трябва да е кратен на sizeof(size_t). Адрес представлява поредност на блок за данни. Това означава, че адрес 0 не е superblock, а е първият блок за данни. 

1.2.3. Съдържание на директория - данните за всеки файл се записват плътно до данните за другите файлове. Данните за всеки файл в директория представляват следната тройка:
- размер на името на файла. Заема sizeof(size_t) байта
- име на файл. Заема толкова байта, колкото е стойността на "размер на името на файла"
- номер на блок, в който е записана информацията за inode-а на файла. Заема sizeof(size_t) байта.

При такава структура, за да се намира inode-а на файл, използвайки абсолютния път до файла, трябва във всяка директория до достигането му да се обхождат записите за другите файлове в директорията и за всеки от тях да се следи дължината на името.



2. Използвани абстракции:
За да имам прост error handling, създадох функцията assert, която използвах при всяка ситуация, при която може да възникне грешка, особено при извикванията на системни функции и при валидация на потребителски вход. Когато се случва грешка, тя прекратява програмата, като преди това освобождава заделените ресурси. На всеки assert е зададен различен код за грешка. Има assert-и за потребителски грешки, при които се показва и четимо съобщение за грешка.

За да не се замислям непрекъснато за това дали не пропускам да освобождавам памет, реших да създам прост garbage collector. Създадох wrapper на malloc - fs_malloc. Тази функция заделя толкова памет, колкото ѝ се подава, и запазва указателя към заделената памет, за да се освободи паметта точно преди прекратяване на програмата. Паметта се освобождава както при успешно приключване на изпълнение, така и при възникване на грешка.

По същия начин и поради същата причина създадох и wrapper на open - по време на изпълнението се отварят файлове, пазят се файловите дескриптори и точно преди приключване на изпълнението на програмата, файловите дескриптори се затварят.

Решението ресурсите да се освобождават само накрая е подходящо, тъй като програмата приключва скоро след стартиране.

Създадох структура fs_str - абстракция на символен низ. Пази се указател към символи и размер на низа. Удобно е за resolve при пътища на файлове, тъй като може един път да се заделят байтове за целия път, и след това да се създадат няколко инстанции на fs_str, всяка от които да сочи към различна позиция от пътя и да пази различна дължина. И така всяка инстанция може да представлява различен token от целия път.

Голяма част от функциите приемат като първи аргумент структура fs_meta. Тя съдържа метаданни за файловата система като например отворен файлов дескриптор, използван за четене и писане на данни във файловата система, garbage collection, цялата информация от superblock-а, и други. fs_meta се създава преди изпълнение на повечето команди (всички без mkfs) и се унищожава в края на изпълнението. Чрез подаването му като първи аргумент на голяма част от функциите симулирам ООП в C.

За имплементация на всички команди използвах помощни функции, по-интересните от които са:
- set_block_status - приема номер на data block и какъв статус да се зададе - 0 или 1, т.е. свободен или зает. Отбелязва го в bitmap-а.
- get_free_data_block - връща свободен блок от bitmap-а (но не го отбелязва като свободен - трябва да се извикай set_block_status)
- create_empty_inode - намира и запазва свободен блок, създава и връща fs_inode структура и data_block, в който да се запише (но не го записва)
- get_fs_meta - отваря файла, върху който е записана файловата система, чете метаданни от superblock-а, прави някои други инициализации, които са имплементационен детайл (напр. компилиране на регулярен израз, който се ползва при валидиране на име на файл). Извиква се при повечето команди и върнатият обект се ползва през цялото време на изпълнение на програмата. 
- allow_write - отваря наново файла, върху който е записана файловата система, но с write права
- calc_data_offset - проста формула за изчисление на offset от началото на файла, върху който е записана файловата система, при подаден номер на блок за данни
- read_block - чете съдържанието при подаден номер на блок за данни. Подаденият блок за данни може да е direct, single indirect, double indirect или triple indirect, което се указва с level. read_block рекурсивно изчита информацията
- read_entire_file - изчита цялото съдържание на inode чрез множество извиквания на read_block, съобразявайки се с информацията за direct blocks, single indirect block и т.н., записана в inode-а
- free_data_block - рекурсивно може да отбелязва блокове за данни като свободни, при подадени блок, ниво колко блока са освободени, колко има да се освободят. Алгоритъмът е подобен на read_block
- inode_free_all_data_blocks - алгоритъм, подобен на read_entire_file, за изтриване на цялото съдържание в inode
- write_data_to_block - алгоритъм, подобен на read_block и free_data_block, но рекурсивно записване на данни
- write_to_file - алгоритъм, подобен на inode_free_all_data_blocks и read_entire_file, но за записване на данни при подаден inode. В началото на функцията се прави освобождаване на всички преди това записани данни.
- read_inode - при подаден номер на блок изчита информация за inode и я връща в структура fs_inode
- write_inode - приема структура fs_inode, в която е записан и номера на блока, където се намира inode-а във файловата система, и там записва новите данни за inode-а
- get_tokens_count и str_split - функции, които помагат за генериране на fs_str. get_tokens_count се използва, за да се разбере колко памет да се задели за tokens_offsets, а str_split връща offset-и от началото на подаден низ, като всеки offset е началото на някой token в резултат от split-а.
- dir_get_child_inode_data_block - приема inode на директория и име на файл в директорията. Връща статус - резултат от търсенето. Ако е намерен файла, връща и номер на блока, в който се намира inode-а на child-а.
- dir_add_file - при подаден inode на директория, име на нов файл и номер на блок, в който се намира inode-а на файла, добавя информацията към съдържанието на директорията
- dir_rm_file - премахва от съдържанието на директория файл
- get_inode - при подаден абсолютен път до файл, прави resolve и връща inode на намерения файл



3. Проверки на fsck:
fsck проверява дали съдържанието на superblock е такова, каквото се очаква:
- означението на главната директория да е '+'
- разделителя в пълните пътища да е '/'
- размера на блок да е 512
- номерът на блока, в който е записан inode-а на главната директория, дали е по-малък от максималния брой блокове за данни
- дали superblock е отбелязан да се намира на първия блок от целия файл, върху който е записана файловата система
- дали началото на bitmap-а за свободни блокове от данни е отбелязан да се намира на втория блок от целия файл, върху който е записана файловата система 
- дали при извлечените от superblock-а данни за брой блокове за запис на bitmap и брой блокове за данни е изпълнено (общ брой блокове) = (брой блокове bitmap + брой блокове за данни + 1)
- проверка дали всеки inode съдържа валидна информация
- обхождайки рекурсивно файловете, почвайки от root директорията, дали наистина отбелязаните в bitmap-а заети и незаети блокове за данни съответстват на записаните адреси в inode-овете, single, double и triple indirect блоковете, и съдържането на директориите


4. Команда stat - извежда:
- име на файла
- размер в байтове
- брой заемани блокове за данни (без да се включват single, double и triple indirect блоковете)
- тип на файла
- номер на блок за данни, в който е разположен inode-а
- права за достъп
- owner във формат (име на потребител/uid)
- група във формат (име на група/gid)
- timestamp на последна промяна в UTC
- брой hard links


5. Команда chmod
Задаването на права става по следния шаблон: chmod access_mode target
където access_mode е в стил "rwxrwxrwx". Първата група rwx е за owner, втората - за групата, третата - за others. Вместо всяка буквичка (r за read право, w за write право и x за execute право) може да се сложи тире (-), за да се укаже, че съответното право не е зададено. Примери:
chmod r-xr-xr-x +/path/to/file - owner, group и others имат само права за read и execute на файла
chmod rwxr-x--- +/path/to/file - owner има всички права, group има само read и execute права, others няма никакви права


6. Особеност при cpfile - когато за source или destination се зададе път, започващ с "+/", настоящата имплементация приема, че това е път във виртуалната файлова система, без да проверява дали няма такъв релативен път в истинската файлова система. Има проверка, която предотвратява успешно изпълнение на операцията, когато едновременно source и destination започват с "+/", следователно програмата не работи, когато се зададе релативен път до файл във истинската файлова система, започващ с "+/". При тази ситуация трябва да се ползва абсолютен път до файла.


7. Използвани източници:
man pages
https://www.youtube.com/watch?v=JoTIG_ElTyY
https://www.grymoire.com/Unix/Inodes.html
